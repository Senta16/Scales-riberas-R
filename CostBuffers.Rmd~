---
title: "CostBuffers"
author: "María"
date: "20 de octubre de 2016"
output: html_document
---

# Create CostBuffers

### Prepare data
```
setwd("/Users/marialeomontes/Documents/BIOLOGIA/ARTICULOS/Local_Regional/Analisis_R")

library(raster)
library(gdistance)
library(rgdal)
library(dplyr)
library(sp)
library(rgeos)
library(vegan)
library(betapart)

#load layers
mdt <- raster("/Users/marialeomontes/Documents/BIOLOGIA/ARTICULOS/Local_Regional/Datos/GIS/mdt_100m_surPI.tif")
coord <- readOGR(dsn = "/Users/marialeomontes/Documents/BIOLOGIA/ARTICULOS/Local_Regional/Datos/GIS", layer="Inventarios_PI")

#crear capa de transición. TransitionFunction es el valor de las dos celdas
#que están siendo conectadas. Directions es el nº de vecinos con el que conecta
tr1 <- transition(x = mdt, transitionFunction = mean, directions = 4)

#Convertir cooordenadas en spatial points
coord1 <- SpatialPoints(coords = coord)

#cost distance
cost <- costDistance(x = tr1, fromCoords = coord1, toCoords = coord1)

#open data Calatayud (results.Rdata)
#load("/Users/marialeomontes/Downloads/results.RData")
#save.image("results2.RData")
#de nuevo, esto último es temporal porque vamos a redefinir los parámetros, pero es como lo hemos hecho hasta ahora
load("/Users/marialeomontes/Documents/BIOLOGIA/ARTICULOS/Local_Regional/Datos/results2.RData")
```
### Buffers area
Este primer paso es temporal, porque hay que volver a calcular el tamaño de los buffers de coste.
Lo que ocurre es que en vez de dibujar un buffer y ver qué puntos caen dentro, como en los GeoBuffers, lo que tenemos es una matriz de distancias de coste de un inventario a otro. 
El cálculo es poniendo una distancia de coste máxima, ver a que puntos se llega desde cada inventario, y esos son los que se incluyen dentro del buffer.
```
#calcular el tamaño de los buffers de coste. De lo que hemos hecho en el archivo 5.-Area
#de los buffers, tenemos que aumentar un 1.7% del coste máximo cada vez, es decir
# w <- (1.7*max(cost))/100
#w es para definir el umbral de los buffers
w <- (1.7 * max(cost)) / 100
ws <- w*1:8

# hay que cargar lrich para poder poner los nombres antes del apply largo. 
lrich <- read.csv("/Users/marialeomontes/Documents/BIOLOGIA/ARTICULOS/Local_Regional/Datos/localrich_PI.csv", sep=";")
colunames<-lrich[,1]
colnames(cost) <- colunames
rownames(cost) <- colunames

buffers <- lapply(ws, function(w){
          apply(cost,2,function(x){
                x<w})
  })
```

